import { AxiosResponse } from 'axios';
import { Links, Url } from '../data/global';
import Maybe from '../types/Maybe';
type ApiErrorLinks = Record<string, Url> & Links;
type Info = {
    field?: string;
    statusCode?: number;
    idempotencyKey?: string;
    title?: string;
    links?: ApiErrorLinks;
};
export default class ApiError extends Error {
    readonly name: string;
    readonly field?: string;
    readonly statusCode?: number;
    readonly idempotencyKey?: string;
    protected title?: string;
    protected links?: ApiErrorLinks;
    private readonly [Symbol.toStringTag];
    constructor(message: string, info?: Info);
    /**
     * Get the error message
     *
     * @since 3.0.0
     * @deprecated Use `error.message` instead.
     */
    getMessage(): string;
    /**
     * Get the field name that contains an error
     *
     * @since 3.0.0
     * @deprecated Use `error.field` instead.
     */
    getField(): Maybe<string>;
    /**
     * Get the API status code
     *
     * @since 3.0.0
     * @deprecated Use `error.statusCode` instead.
     */
    getStatusCode(): Maybe<number>;
    /**
     * Get the documentation URL
     *
     * @since 3.0.0
     */
    getDocumentationUrl(): Maybe<string>;
    /**
     * Get the dashboard URL
     *
     * @since 3.0.0
     */
    getDashboardUrl(): Maybe<string>;
    /**
     * Check if the link exists
     *
     * @since 3.0.0
     */
    hasLink(key: string): boolean;
    /**
     * Retrieve a link by name
     *
     * @since 3.0.0
     */
    getLink(key: string): Maybe<Url>;
    /**
     * @since 3.0.0
     */
    getUrl(key: keyof ApiErrorLinks): Maybe<string>;
    toString(): string;
    /**
     * Creates and returns an `ApiError` from the passed response.
     *
     * @since 3.0.0
     */
    static createFromResponse(response: AxiosResponse): ApiError;
}
export {};
