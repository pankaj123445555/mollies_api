import IteratorHelpers from './IteratorHelpers';
/**
 * An `AsyncIterator` with some of the proposed helpers (see https://github.com/tc39/proposal-iterator-helpers), and
 * which is itself iterable (by returning itself). This class only implements the subset of the functionalities of the
 * async iterator and of the proposed helpers which is relevant to this library.
 *
 * If and when the aforementioned helpers are supported by Node.js, this class is mostly obsolete (besides the iterable
 * part).
 */
export default class HelpfulIterator<T> implements AsyncIterator<T, void, never>, IteratorHelpers<T, AsyncIterator<T, void, never>>, AsyncIterable<T> {
    readonly next: () => Promise<IteratorResult<T, void>>;
    constructor(wrappee: {
        next: () => Promise<IteratorResult<T, void>>;
    });
    [Symbol.asyncIterator](): this;
    drop(limit: number): HelpfulIterator<T>;
    every(callback: (value: T) => boolean | Promise<boolean>): Promise<boolean>;
    filter(callback: (value: T) => boolean | Promise<boolean>): HelpfulIterator<T>;
    find(callback: (value: T) => boolean | Promise<boolean>): Promise<T | undefined>;
    forEach(callback: (value: T) => any | Promise<any>): Promise<void>;
    map<U>(callback: (value: T) => U | Promise<U>): HelpfulIterator<U>;
    some(callback: (value: T) => boolean | Promise<boolean>): Promise<boolean>;
    take(limit: number): HelpfulIterator<T>;
}
