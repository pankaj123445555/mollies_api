import HelpfulIterator from './HelpfulIterator';
/**
 * An iterator which creates an upstream iterator using the factory function passed to the constructor, but only once
 * it is needed (when `next` is called, either directly or indirectly).
 */
export default class LazyIterator<T> implements HelpfulIterator<T> {
    /**
     * Returns the upstream iterator, creating said iterator if that had not happened yet (in other words: if this is the
     * first time this function is called).
     */
    protected settle: () => HelpfulIterator<T>;
    constructor(create: () => HelpfulIterator<T>);
    [Symbol.asyncIterator](): this;
    next(): Promise<IteratorResult<T, void>>;
    drop(limit: number): LazyIterator<T>;
    every(callback: (value: T) => boolean | Promise<boolean>): Promise<boolean>;
    filter(callback: (value: T) => boolean | Promise<boolean>): LazyIterator<T>;
    find(callback: (value: T) => boolean | Promise<boolean>): Promise<T | undefined>;
    forEach(callback: (value: T) => any): Promise<void>;
    map<U>(callback: (value: T) => U | Promise<U>): LazyIterator<U>;
    some(callback: (value: T) => boolean | Promise<boolean>): Promise<boolean>;
    take(limit: number): HelpfulIterator<T>;
}
